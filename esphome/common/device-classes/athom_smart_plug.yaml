esphome:
  name: ${devicename}
  platform: ESP8266
  board: esp8285
  esp8266_restore_from_flash: true
  project:
    name: "athom.smart-plug"
    version: "1.1"

preferences:
  flash_write_interval: 10min

dashboard_import:
  package_import_url: github://athom-tech/athom-configs/athom-smart-plug.yaml

logger:
  baud_rate: 0

# Device Specific Config
uart:
  rx_pin: RX
  baud_rate: 4800

binary_sensor:
  - platform: gpio
    pin:
      number: 3
      mode: INPUT_PULLUP
      inverted: True
    name: "${human_devicename} Power Button"
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - switch.toggle: relay
      - timing:
          - ON for at least 4s
        then:
          - button.press: restart_button
  - platform: status
    name: "${human_devicename} Status"

sensor:
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: True
    cf_pin: GPIO4
    cf1_pin: GPIO5
    voltage_divider: 780
    current:
      name: "${human_devicename} Current"
      filters:
          - calibrate_linear:
            - 0.0000 -> 0.0110 # Relay off no load
            - 0.0097 -> 0.0260 # Relay on no load
            - 0.9270 -> 0.7570
            - 2.0133 -> 1.6330
            - 2.9307 -> 2.3750
            - 5.4848 -> 4.4210
            - 8.4308 -> 6.8330
            - 9.9171 -> 7.9830
          # Normalize for plug load
          - lambda: if (x < 0.0260) return 0; else return (x - 0.0260);
    voltage:
      name: "${human_devicename} Voltage"

    power:
      name: "${human_devicename} Power"
      id: socket_my_power
      unit_of_measurement: W
      filters:
          - calibrate_linear:
            - 0.0000 -> 0.5900 # Relay off no load
            - 0.0000 -> 1.5600 # Relay on no load
            - 198.5129 -> 87.8300
            - 434.2469 -> 189.5000
            - 628.6241 -> 273.9000
            - 1067.0067 -> 460.1000
            - 1619.8098 -> 699.2000
            - 2043.0282 -> 885.0000
          # Normalize for plug load
          - lambda: if (x < 1.5600) return 0; else return (x - 1.5600);
    change_mode_every: 1
    update_interval: 20s

  - platform: total_daily_energy
    name: "${human_devicename} Total Daily Energy"
    power_id: socket_my_power
    unit_of_measurement: kWh
    accuracy_decimals: 3
    filters:
      - multiply: 0.001


switch:
  - platform: gpio
    name: "${human_devicename} Relay"
    pin: GPIO14
    id: relay
    restore_mode: RESTORE_DEFAULT_ON
    icon: ${icon}


# Treat the Blue LED like any other light
output:
  - platform: esp8266_pwm
    pin: GPIO13
    inverted: True
    id: led_blue

light:
  - platform: monochromatic
    name: "${human_devicename} Blue LED"
    output: led_blue
    id: light_led_blue
    icon: mdi:led-on
    default_transition_length: 2s
# If needed, here's how to revert the LED to just a normal
# status light!
#status_led:
#  pin: GPIO13
